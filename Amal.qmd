---
title: "Star_systems"
author: "Jinane AMAL"
format: html
editor: visual
---

```{r}
#| message: false
here::i_am("star_systems.Rproj")
library(here)
library(vroom)
library(dplyr)
library(tidyr)
library(ggplot2)
library (stringr)
library(knitr)
library(readr)
```

You'll find [here](https://github.com/jinane1amal/star_systems.git) the link to my github sample test

## Question 3

```{r}
systems <- vroom("all-systems.csv")
str("all-systems.csv")
```

```{r}
# Check the number of star systems and variables
num_systems <- nrow(systems)
num_variables <- ncol(systems)
# Define columns with comma-separated values that need to be converted to numeric
comma_columns <- c( "Mass", "Star Luminosity", "relative radius")

numeric_columns <- c("STAR_KEY", "Distance (Lightyears)", "temperature", "Mass", "Star Luminosity", "relative radius")
numeric_verification <- sapply(systems[, numeric_columns, drop = FALSE], is.numeric)
numerical_check <- sapply(system, is.numeric)
all_numerical <- all(numerical_check)
if (num_systems == 1039 && num_variables == 8 && all_numerical) {
  cat("Data loaded successfully.")
} else {
  cat("Error: There is an issue with the loading process.")
}

# Display summary statistics
summary(systems)

```

## Question 4

```{r}

missing_values <- colSums(is.na(systems))
sum_missing_values <- sum(missing_values)

num_observations_with_missing <- sum(apply(systems, 1, anyNA))

summary_table <- data.frame(
  Metric = c("Number of Observations", "Number of Variables", "Number of Missing Values", "Number of Observations with Missing Values"),
  Value = c(num_systems, num_variables, sum(missing_values), num_observations_with_missing)
)

cat("| Metric | Value |\n")
cat("|--------|-------|\n")
cat(sprintf("| Number of Observations | %d |\n", num_systems))
cat(sprintf("| Number of Variables | %d |\n", num_variables))
cat(sprintf("| Number of Missing Values | %d |\n", sum_missing_values))
cat(sprintf("| Number of Observations with Missing Values | %d |\n", num_observations_with_missing))
knitr::kable(summary_table)
```

So, we have a situation where number of systems is `r num_systems` and the number of variables which we can observe is `r num_variables`. We thus have `r sum_missing_values ` missing values in the table in `r num_observations_with_missing` lines.

## Question 5

```{r luminosity-mass-plot, echo=FALSE, warning=FALSE}

# Create a scatter plot of luminosity against mass
ggplot(systems, aes(x = Mass, y = `Star Luminosity`)) +
  geom_point() +
  labs(title = "Luminosity vs Mass of Stars",
       x = "Mass ",
       y = "Star Luminosity ") +
  theme_minimal()
```
## Question 6


```{r extreme-stars-table, results='asis'}
systems_full_filtered <- systems %>%
  filter(!is.na(`STAR_KEY`) & 
         !is.na(`temperature`) & 
         !is.na(`Distance (Lightyears)`) & 
         !is.na(`Star Luminosity`) & 
         !is.na(`relative radius`) & 
         !is.na(`Mass`))

```
                                                             
```{r}
extreme_systems <- systems_full_filtered %>%
  summarise(
    most_distant_star = S_name[which.max(`Distance (Lightyears)`)],
    closest_star = S_name[which.min(`Distance (Lightyears)`)],
    hottest_star = S_name[which.max(`temperature`)],
    coolest_star = S_name[which.min(`temperature`)],
    largest_star = S_name[which.max(`relative radius`)],
    smallest_star = S_name[which.min(`relative radius`)],
    heaviest_star = S_name[which.max(`Mass`)],
    lightest_star = S_name[which.min(`Mass`)],
    brightest_star = S_name[which.max(`Star Luminosity`)],
    dimmest_star = S_name[which.min(`Star Luminosity`)]
  )

extreme_systems

```

## Question 8

```{r}
Control <- vroom("System_control.csv")
faction <- vroom("factions.csv")
```
## Question 9

```{r}
faction_table <- faction %>%
  filter(fkey %in% c("A", "I", "U")) %>%
  group_by(fkey) %>%
  summarise(Number_of_Star_Systems = n())
knitr::kable(faction_table)
```



## Question 10

```{r missing-star-systems, results='asis'}


# Assuming 'fkey' is the common key between faction and system_control_data
# Replace 'fkey' with the actual key column name in your datasets
missing_systems <- faction %>%
  anti_join(Control, by = "fkey")

# Get the number of missing star systems
num_missing_systems <- nrow(missing_systems)

# Print the number in the document
cat("Number of star systems not found in System_control.csv:", num_missing_systems)

```
So,the Number of star systems not found in System_control.csv is `r num_missing_systems` stars systems.

## Question 11

```{r faction-control-plot, echo=FALSE, warning=FALSE, message=FALSE}

faction_control_plot_data <- faction %>%
  filter(!is.na(`Name Of The Faction`)) %>%
  group_by(`Name Of The Faction`) %>%
  summarise(Num_Systems = n()) %>%
  filter(Num_Systems > 0)

ggplot(faction_control_plot_data, aes(x = `Name Of The Faction`, y = Num_Systems)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Number of Star Systems Controlled by Each Faction",
       x = "Faction",
       y = "Number of Star Systems") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30, hjust = 0.7))

```



## Question 12
```{r}
systems|>
filter(!is.na(`Name Of The Faction`) & !(`Name Of The Faction` %in% c("A", "I", "U"))) %>%
  filter(!is.na(`Distance (Lightyears)`)) %>%
  ggplot(aes(x = `Name Of The Faction`, y = `Distance (Lightyears)`)) +
  geom_boxplot(fill = "skyblue") +
  labs(title = "Distance to the Sun of Star Systems by Controlling Faction",
       x = "Faction",
       y = "Distance to the Sun (Lightyears)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


 
## Question 15
```{r}
types <- vroom("star_types.csv")
```


## Question 16
```{r}

systems <- systems %>%
  separate(col=`Star Type`, into = c("harvard_letter", "harvard_digit", "yerkes_class"), sep ="\\-")
head(systems)

```
## Question 17 

```{r temperature-distribution-plot, echo=FALSE, warning=FALSE, message=FALSE}
ggplot(systems, aes(x = temperature)) +
  geom_histogram(binwidth = 100, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Temperature Distribution of Stars",
       x = "Temperature (Kelvin)",
       y = "Frequency") +
  theme_minimal()
```

